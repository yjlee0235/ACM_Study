#include <iostream>
#include <cstring>

//성공

typedef struct dnode{
	int data;
	struct dnode *llink, *rlink;
}dnode;

typedef struct {
	dnode *head, *tail;
	int size;
}deque;
void init(deque *d) {
	d->head = d->tail = nullptr;
	d->size = 0;
}

int empty(deque *d) {
	return (d->size == 0);
}
void push_front(deque *d, int item) {
	dnode *newNode = new dnode;
	newNode->data = item;
	if (empty(d)) {
		newNode->llink = newNode->rlink = nullptr;
		d->head = d->tail = newNode;
	}
	else {
		newNode->llink = nullptr;
		newNode->rlink = d->head;
		d->head->llink = newNode;
		d->head = d->head->llink;
	}
	d->size++;
}
void push_back(deque *d, int item) {
	dnode *newNode = new dnode;
	newNode->data = item;
	if (empty(d)) {
		newNode->llink = newNode->rlink = nullptr;
		d->head = d->tail = newNode;
	}
	else {
		newNode->rlink = nullptr;
		newNode->llink = d->tail;
		d->tail->rlink = newNode;
		d->tail = d->tail->rlink;
	}
	d->size++;
}
int pop_front(deque *d) {
	if (empty(d))
		return -1;
	dnode *p = d->head;
	int ret = p->data;
	if (d->size == 1)
		d->head = d->tail = nullptr;
	else {
		d->head->rlink->llink = nullptr;
		d->head = d->head->rlink;
	}
	d->size--;
	delete p;
	return ret;
}
int pop_back(deque *d) {
	if (empty(d))
		return -1;
	dnode *p = d->tail;
	int ret = p->data;
	if (d->size == 1)
		d->head = d->tail = nullptr;
	else {
		d->tail->llink->rlink = nullptr;
		d->tail = d->tail->llink;
	}
	d->size--;
	delete p;
	return ret;
}
int size(deque *d) {
	return d->size;
}
int front(deque *d) {
	if (empty(d))
		return -1;
	return d->head->data;
}
int back(deque *d) {
	if (empty(d))
		return -1;
	return d->tail->data;
}

int main() {
	int N, item;
	char input[12];
	deque d;
	init(&d);

	scanf("%d", &N);
	while (N--) {
		scanf("%s", input);
		if (!strcmp(input, "push_front")) {
			scanf("%d", &item);
			push_front(&d, item);
		}
		else if (!strcmp(input, "push_back")) {
			scanf("%d", &item);
			push_back(&d, item);
		}
		else if (!strcmp(input, "pop_front"))
			printf("%d\n", pop_front(&d));
		else if (!strcmp(input, "pop_back"))
			printf("%d\n", pop_back(&d));
		else if (!strcmp(input, "size"))
			printf("%d\n", size(&d));
		else if (!strcmp(input, "empty"))
			printf("%d\n", empty(&d));
		else if (!strcmp(input, "front"))
			printf("%d\n", front(&d));
		else if (!strcmp(input, "back"))
			printf("%d\n", back(&d));
	}
	return 0;
}