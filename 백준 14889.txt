#include <iostream>

//실패

int halfFact(int n) {
    int ret = 1;
    for (int i = n; i > 2; i--)
        ret *= i;
    return ret;
}

int calcMinStatus(int *s, int *team, int n) {
    int ss = 0, ls = 0;
    int mid = n / 2;
    int multi = halfFact(mid);
    int ret;

    //star팀의 능력치 계산
    for (int i = 0; i < mid; i++)
        for (int j = i + 1; j < i; j++)
            //s가 1차원 배열으로 선언되었음
            ss += s[n * (team[i] - 1) + team[j]] + s[n * (team[j] - 1) + team[i]];
    //link팀의 능력치 계산
    for (int i = mid; i < n; i++)
        for (int j = i + 1; j < i; j++)
            //s가 1차원 배열으로 선언되었음
            ls += s[n * (team[i] - 1) + team[j]] + s[n * (team[j] - 1) + team[i]];

    ret = (ss - ls) * multi;
    //ret는 능력치 차이이기 때문에 항상 양수
    if (ret < 0)
        return -ret;
    else
        return ret;
}

void makeTeam(int cnt, int n, int *s, bool *visit, int *team, int *min) {
    if (cnt == n) {
        int tmp = calcMinStatus(s, team, n);
        if (tmp < *min)
            *min = tmp;
        return;
    }
    else {
        for (int i = 0; i < n; i++) {
            if (!visit[i]) {
                visit[i] = true;
                team[cnt] = i+1;
                makeTeam(cnt+1, n, s, visit, team, min);
                visit[i] = false;
            }
        }
    }
}


int main() {
    int N, min = 0;

    scanf("%d", &N);

    int *S = new int[N*N];
    int *team = new int[N];
    bool *visit = new bool[N];

    for (int i = 0; i < N*N; i++)
        scanf("%d", &S[i]);

    for (int i = 0; i < N; i++)
        visit[i] = false;

    makeTeam(0, N, S, visit, team, &min);
    printf("%d\n", min);

    delete[] S, team, visit;
    return 0;
}
